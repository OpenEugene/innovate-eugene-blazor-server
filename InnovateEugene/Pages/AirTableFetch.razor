@page "/AirTableFetch"
@inject IHttpClientFactory ClientFactory

<h1>Innovation Assets</h1>

<p>This component demonstrates fetching Asset data from AirTable.</p>


<RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" Data="@Assets" TItem="Asset" EmptyText=@emptyText>
    <Columns>
        <RadzenGridColumn TItem="Asset" Property="Name" Title="Name" />
        <RadzenGridColumn TItem="Asset" Property="AssetType" Title="Asset Type" />
        <RadzenGridColumn TItem="Asset" Property="Address" Title="Address" />
    </Columns>
</RadzenGrid>




@code {

    readonly string baseId = "appiPhOBADo9NMICo";
    readonly string appKey = "keyTrKPGVY60FdpzC";

    string emptyText = "Loading from the cloud...";

    List<Asset> Assets = new List<Asset>();

    protected class Asset
    {
        public string Name { get; set; }
        public string AssetType { get; set; }
        public string Address { get; set; }
    }



    protected override async Task OnInitializedAsync()
    {
        string offset = null;


        using (AirtableBase airtableBase = new AirtableBase(appKey, baseId))
        {
            Task<AirtableListRecordsResponse> task = airtableBase.ListRecords("Assets");
            AirtableListRecordsResponse response = await task;

            if (response.Success)
            {
                emptyText = "OK";

                foreach (var item in response.Records)
                {
                    Assets.Add(new Asset
                    {
                        Name = item.GetField("Name")?.ToString(),
                        AssetType = item.GetField("Asset Type")?.ToString(),
                        Address = item.GetField("Address")?.ToString(),
                    });
                }
                offset = response.Offset;
            }
            else if (response.AirtableApiError is AirtableApiException)
            {
                emptyText = response.AirtableApiError.ErrorMessage;
            }
            else
            {
                emptyText = "Unknown error";
            }
        }
    }
}
